from aiogram import Dispatcher, Bot, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from state import RegistrationStates
from aiogram.utils.exceptions import MessageNotModified
from dotenv import load_dotenv
from buttons import *
from database import cursor
import logging, os, aioschedule, asyncio, time

load_dotenv('.env')

bot = Bot(token=os.environ.get('token2'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

initial_amount = 400
previous_button_ids = {}
round_counter = 1
auction_counter = 1
first_click_user_id = None
user_clicks = {}

@dp.callback_query_handler(lambda call: call)
async def inline(call):
    global initial_amount, first_click_user_id
    user_id = call.from_user.id
    if call.data == "–∑–∞—Ä–µ–≥–∞—Ç—å—Å—è":
        await register(call.message)
    elif call.data == "–æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω":
        cursor.execute(f"UPDATE users SET agreement = ? WHERE user_id = ?", (time.ctime(), call.from_user.id))
        cursor.connection.commit()
        await bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æüëç –¢–µ–ø–µ—Ä—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=reg_keyboard)
    elif call.data == "–±–µ—Ä—É":
        if user_clicks.get(user_id, 0) < 2:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
            user_clicks[user_id] = user_clicks.get(user_id, 0) + 1

            if first_click_user_id is None:
                first_click_user_id = user_id
                await process_callback_button(call)
                initial_amount = max(initial_amount + 50, 0)
                await send_winner(user_id, initial_amount)
                initial_amount = 400  # –°–±—Ä–æ—Å–∏—Ç—å initial_amount –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

            elif first_click_user_id == user_id:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
                await process_callback_button(call)
                initial_amount = max(initial_amount + 50, 0)
                await send_winner(user_id, initial_amount)
                initial_amount = 400  # –°–±—Ä–æ—Å–∏—Ç—å initial_amount –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫—Ç–æ-—Ç–æ —É–∂–µ –≤—ã–∏–≥—Ä–∞–ª
                await call.answer("–ö–Ω–æ–ø–∫–∞ —É–∂–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", show_alert=True)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å –≤ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑
            await call.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–∏ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏.", show_alert=True)
        # if user_id not in user_clicks:
        #     user_clicks[user_id] = 0
        # if user_clicks[user_id] < 2:
        #     user_clicks[user_id] += 1
        #     if first_click_user_id is None:
        #         first_click_user_id = call.from_user.id
        #         await process_callback_button(call)
        #         global initial_amount
        #         initial_amount = max(initial_amount + 50, 0)
        #         await send_winner(call.from_user.id, initial_amount)
        #     initial_amount = 400

async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    try:
        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                            message_id=callback_query.message.message_id,
                                            reply_markup=None)
    except MessageNotModified:
        pass

def reset_registration():
    global first_click_user_id
    first_click_user_id = None

@dp.message_handler(commands='start')
async def start(message:types.Message):
    cursor.execute(f"SELECT * FROM users WHERE user_id = '{message.from_user.id}';")
    result = cursor.fetchall()
    if result == []:
        cursor.execute(f"""INSERT INTO users (user_id, username) VALUES ('{message.from_user.id}', '{message.from_user.username}');""")
    cursor.connection.commit()
    await message.answer("""–ü—Ä–∞–≤–∏–ª–∞ –≥–æ–ª–ª–∞–Ω–¥–æ—Å–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ "–¢—É—Ä–µ—Ü–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏ - –°–µ–Ω—Ç—è–±—Ä—å 2023"                                                                                                
1        üë®üèª‚Äçüíª –ê—É–∫—Ü–∏–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π.                                                                                        
2        ü•á –ü–µ—Ä–≤—ã–π –Ω–∞–ø–∏—Å–∞–≤—à–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –ª–æ—Ç —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏. –§–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è.                                                                                        
3        ‚õî –ß–µ–ª–æ–≤–µ–∫ –æ—Ç–∫–∞–∑–∞–≤—à–∏–π—Å—è –æ—Ç –ª–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ  3 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞, –≤–Ω–æ—Å–∏—Ç—å—Å—è –≤ –±–∞–Ω –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ "–¢—É—Ä–µ—Ü–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏ - –°–µ–Ω—Ç—è–±—Ä—å 2023", –µ–≥–æ –ª–æ—Ç –ø–µ—Ä–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ. –û—Ç–∫–∞–∑–∞–≤—à–∏–π –æ—Ç –ª–æ—Ç–∞ –±–æ–ª—å—à–µ 3 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ –≤–Ω–æ—Å–∏—Ç—å—Å—è –≤ –±–∞–Ω –Ω–∞ —É—á–∞—Å—Ç–∏–µ –Ω–∞ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –Ω–∞ –ø–æ–ª–≥–æ–¥–∞.                                                                                        
4        üîÅ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ª–æ—Ç —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –í–ü –∫–æ–º–ø–∞–Ω–Ω–∏–π.                                                                                        
5        ‚ö†Ô∏è 1 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 –ª–æ—Ç  –Ω–∞ –¥–∞–Ω–Ω–æ–º –∞—É—Ü–∫–∏–æ–Ω–µ.\n

–£—Å–ª–æ–≤–∏—è –ø–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–º –ª–æ—Ç–∞–º –Ω–∞ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ "–¢—É—Ä–µ—Ü–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏ - –°–µ–Ω—Ç—è–±—Ä—å 2023"                                                                                                
1        üìÜ –°—Ä–æ–∫ –≤—ã–ø–∏—Å–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –¥–æ 31 –¥–µ–∫–∞–±—Ä—è 2023.                                                                                        
2        üìÖ –î–∞—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥–æ 01 —Å–µ–Ω—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞                                                                                        
3        üßëüèª‚Äç‚úàÔ∏è –ú–∞—Ä—à—Ä—É—Ç  - –≤ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –¢—É—Ä—Ü–∏–π üáπüá∑ (—Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ) —Å 1 –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –°—Ç–∞–º–±—É–ª–µ –∏–ª–∏ –ø—Ä—è–º–æ–π —Ä–µ–π—Å –≤ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è  –∏  –≤–æ–∑–≤—Ä–∞—Ç –≤ –ë–∏—à–∫–µ–∫. –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø—Ä–∏–ª–µ—Ç –≤ 1 –≥–æ—Ä–æ–¥, –≤—ã–ª–µ—Ç –∏–∑ –¥—Ä—É–≥–æ–≥–æ.                                                                                        
4        üó∫ –ü–æ –ø–æ–¥–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ–π—Å—ã —É –∞–≥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –ø–æ—á—Ç—É air.manager@concept.kg üìß –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞, –∏ –≤—ã–∫—É–ø–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π.                                                                                        
5        üîÉ –¢–∞–∫—Å—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞. –†–∞—Å—á–µ—Ç –≤ —Å–æ–º–∞—Ö –Ω–∞ –¥–µ–Ω—å –≤—ã–ø–∏—Å–∫–∏ –ø–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º—É –∫—É—Ä—Å—É –∫–æ–º–ø–∞–Ω–∏–∏.                                                                                        
6        ‚ùó ‚ùó ‚ùó –ù–∞ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –ª–æ—Ç—ã –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É. –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–π–º —É –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ–ø–ª–∞—Ç–∞ —Å—Ä–∞–∑—É. –í –≤–∏–¥–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.""", reply_markup=agree_keyboard)

async def register(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    await RegistrationStates.name.set()

@dp.message_handler(state=RegistrationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text
    cursor.execute("UPDATE users SET name = ? WHERE user_id = ?", (name, message.from_user.id))
    cursor.connection.commit()
    await state.update_data(name=name)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await RegistrationStates.lastname.set()

@dp.message_handler(state=RegistrationStates.lastname)
async def process_surname(message: types.Message, state: FSMContext):
    lastname = message.text
    cursor.execute("UPDATE users SET lastname = ? WHERE user_id = ?", (lastname, message.from_user.id))
    cursor.connection.commit()
    await state.update_data(lastname=lastname)
    user_data = await state.get_data()
    await state.finish()
    await message.reply(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {user_data['name']} {user_data['lastname']}!")
    await message.answer("‚è≥–ú—ã –≤–∞–º —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –∞—É–∫—Ü–∏–æ–Ω –Ω–∞—á–Ω–µ—Ç—Å—è. üìß–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω—è")



async def send_auction_start_message():
    global initial_amount, previous_button_ids, auction_counter, round_counter

    cursor.execute("SELECT user_id, agreement, name, lastname FROM users")
    users = cursor.fetchall()


    if initial_amount == 400:
        for user_id, agreement, name, lastname in users:
            if is_user_eligible(user_id, agreement, name, lastname):
                message_text = f"üë®‚Äç‚öñ –ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞–ª—Å—è - –õ–æ—Ç {round_counter} -  –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ üí≤{initial_amount}. –í—Å–µ–º —É–¥–∞—á–∏!)"
                take_button = types.InlineKeyboardButton("–ë–µ—Ä—É", callback_data="–±–µ—Ä—É")
                take_keyboard = types.InlineKeyboardMarkup()
                take_keyboard.add(take_button)
                previous_button_id = previous_button_ids.get(user_id)
                if previous_button_id:
                    try:
                        await bot.edit_message_reply_markup(chat_id=user_id, message_id=previous_button_id, reply_markup=None)
                    except MessageNotModified:
                        pass
                sent_message = await bot.send_message(user_id, message_text, reply_markup=take_keyboard)
                previous_button_ids[user_id] = sent_message.message_id

        initial_amount = max(initial_amount - 50,0)

    elif 250 <= initial_amount < 400:
        for user_id, agreement, name, lastname in users:
            if is_user_eligible(user_id, agreement, name, lastname):
                message_text = f"üë®‚Äç‚öñ –¶–µ–Ω–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å! - –õ–æ—Ç {round_counter} -  –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ üí≤{initial_amount}. –í—Å–µ–º —É–¥–∞—á–∏!)"
                take_button = types.InlineKeyboardButton("–ë–µ—Ä—É", callback_data="–±–µ—Ä—É")
                take_keyboard = types.InlineKeyboardMarkup()
                take_keyboard.add(take_button)
                previous_button_id = previous_button_ids.get(user_id)
                if previous_button_id:
                    try:
                        await bot.edit_message_reply_markup(chat_id=user_id, message_id=previous_button_id, reply_markup=None)
                    except MessageNotModified:
                        pass
                sent_message = await bot.send_message(user_id, message_text, reply_markup=take_keyboard)
                previous_button_ids[user_id] = sent_message.message_id
                
        initial_amount = max(initial_amount - 50,0)


    elif initial_amount < 250:
        for user_id, agreement, name, lastname, in users:
            if is_user_eligible(user_id, agreement, name, lastname):
                message_text = f"üòä –ê—É–∫—Ü–∏–æ–Ω {auction_counter} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
                await bot.send_message(user_id, message_text)
                await stop_scheduler()
                initial_amount = 400

        auction_counter += 1
        round_counter += 1
        if auction_counter <= 10:
            await scheduler()
        else:
            for user_id, agreement, name, lastname, in users:
                if is_user_eligible(user_id, agreement, name, lastname):
                    await bot.send_message(user_id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞—É–∫—Ü–∏–æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∞–ª–∞")
            await stop_scheduler()


    

async def send_winner(user_id, price):
    global auction_counter, initial_amount, round_counter
    cursor.execute(f"SELECT name, lastname, winner FROM users where user_id = {user_id}")
    buyer = cursor.fetchone()
    if buyer:
        name, lastname, winner = buyer
        # if winner < 2:
        winner = winner + 1
        cursor.execute(f"UPDATE users SET winner = ?, price = ? WHERE user_id = ?", (winner, price, user_id))
        cursor.connection.commit()
        cursor.execute(f"SELECT user_id FROM users")
        users = cursor.fetchall()
        for user in users:
            user = user[0]
            message_text = f"üë®‚Äç‚öñ –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} {lastname} –≤—ã–∏–≥—Ä–∞–ª - –õ–æ—Ç {round_counter}  - –∑–∞ üí≤{initial_amount}."
            await bot.send_message(user, message_text)
            message_text2 = f"üòä –ê—É–∫—Ü–∏–æ–Ω {auction_counter} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
            await bot.send_message(user, message_text2)
        auction_counter += 1
        if auction_counter == 11:
            await bot.send_message(user_id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞—É–∫—Ü–∏–æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∞–ª–∞")
            await stop_scheduler()
        round_counter += 1
        reset_registration()

        # elif winner == 2:
            
        #     message_text = f"üë®‚Äç‚öñ –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö."
        #     await bot.send_message(user_id, message_text)
        #     initial_amount = max(initial_amount - 50, 0)



def is_user_eligible(user_id, agreement, name, lastname):
    return agreement is not None and agreement != 0 and name is not None and lastname is not None

async def scheduler():
    aioschedule.every(15).seconds.do(send_auction_start_message)

    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def stop_scheduler():
    aioschedule.clear()
    print("Scheduler stopped")

async def on_startup(_):
    asyncio.create_task(scheduler())

executor.start_polling(dp, skip_updates=True, on_startup=on_startup)